load("~/RData/Account201900509.Rda")
load("~/RData/Opportunity.RData")
library(sqldf)
Oppo<-sqldf('SELECT Id, count(AccountId) as "CantidadCuentas" FROM Opportunity group by AccountId' )
View(Oppo)
sum(Oppo$CantidadCuentas)
rm(list=ls())
gc()
library(curl)
library(httr)
# aca es el pass de windows
set_config(use_proxy(url="ash-mwg-02", port=9090, username="rfpardo@iadb.org", password="Canada2021"))
############################### Prod ########################################
# aca es el pass de SF
library(RForcecom)
username <- "rfpardo@iadb.org"
password <- "Canada2021*O1CTIawMmrOaK98ubVW305Vf"
instanceURL <-  "https://login.salesforce.com/"
apiVersion <- "45.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
# load("~/RData/RP_Opportunity_18-Jun-2019 11.08.Rda")
# load("~/RData/RP_Opportunity_24-Jun-2019 15.24.Rda")
# load("~/RData/RP_Opportunity_25-Jun-2019 11.30.Rda")
# load("~/RData/RP_Opportunity_11-Jul-2019 15.36.Rda")
# load("~/RData/RP_Opportunity_22-Jul-2019 16.07.Rda")
# load("~/RData/RP_Opportunity_22-Jul-2019 17.22.Rda")
# load("~/RData/RP_Opportunity_22-Jul-2019 17.43.Rda")
# load("~/RData/RP_Opportunity_22-Jul-2019 17.51.Rda")
# load("~/RData/RP_Opportunity_24-Jul-2019 12.12.Rda")
# load("~/RData/RP_Opportunity_26-Jul-2019 09.47.Rda")
load("~/RData/RP_Opportunity_29-Jul-2019 11.16.Rda")
View(Opportunity)
df3 <- Opportunity[, c("Id", "Name","Description", "Country_of_the_owner__c", "CreatedDate", "Opportunity_Iniciators__c", "Sector_Global__c","StageName", "Type")]
summary(df3)
df4<-subset(df3,(!is.na(df3$Description)))
# detect language of description ##
library("textcat")
df4$DescriptionLanguage <-  as.factor(textcat(df4$Description))
# look at the languages ###
table(df4$DescriptionLanguage, useNA = "always")
# look at descriptions that are not in spanish, portuguese or english ##
df5<-subset(df4,!(df4$DescriptionLanguage %in% c("english", "portuguese", "spanish", "NA")))
########################################################### Resumen datasets ###################################################################
# df3 full dataset
# df4 dataset with Description <> NA
# df5 dataset with DescriptionLanguage <> "english", "portuguese", "spanish"
# df6 dataset in English (222)
# df7 dataset in Spanish (580)
df6$TolName <- removeWords(tolower(as.character(df6$Name)), stopwords("english"))
########################################################### Resumen datasets ###################################################################
# df3 full dataset
# df4 dataset with Description <> NA
# df5 dataset with DescriptionLanguage <> "english", "portuguese", "spanish"
# df6 dataset in English (222)
# df7 dataset in Spanish (580)\library(tm)
df6$TolName <- removeWords(tolower(as.character(df6$Name)), stopwords("english"))
########################################################### Resumen datasets ###################################################################
# df3 full dataset
# df4 dataset with Description <> NA
# df5 dataset with DescriptionLanguage <> "english", "portuguese", "spanish"
# df6 dataset in English (222)
# df7 dataset in Spanish (580)
library(tm)
df6$TolName <- removeWords(tolower(as.character(df6$Name)), stopwords("english"))
df6<-subset(df4,(df4$DescriptionLanguage =="english"))
df6$TolName <- removeWords(tolower(as.character(df6$Name)), stopwords("english"))
df6$Description <-removeWords(as.character(tolower(df6$Description)), stopwords("english"))
df6$Description <- as.factor(df6$Description)
class(df6$Description)
library(udpipe)
ud_model <- udpipe_download_model(language = "english")
ud_model <- udpipe_load_model(ud_model$file_model)
x <- udpipe_annotate(ud_model, x = df6$Description, doc_id = df6$Id)
x <- as.data.frame(x)
library(lattice)
library(lattice)
stats <- txt_freq(x$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = stats, col = "yellow",
main = "UPOS (Universal Parts of Speech)\n frequency of occurrence",
xlab = "Freq")
library(RColorBrewer)
display.brewer.all()
## NOUNS
stats <- subset(x, upos %in% c("NOUN"))
stats <- txt_freq(stats$token)
View(stats)
View(stats)
View(ud_model)
View(stats)
View(x)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10),col=colorRampPalette(brewer.pal(9, "Blues"))(10),
main = "Most Occurring Nouns in Description Fields (English)", xlab = "Frequency (quantity of terms)")
## ADJECTIVES
stats <- subset(x, upos %in% c("ADJ"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10), col=colorRampPalette(brewer.pal(9,"Oranges"))(10),
main = "Most Occurring Adjectives in Description Fields (English)", xlab = "Frequency (quantity of terms)")
## VERBS
stats <- subset(x, upos %in% c("VERB"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10), col=colorRampPalette(brewer.pal(9,"Greens"))(10),
main = "Most Occurring Verbs in Description Fields (English)", xlab = "Frequency (quantity of terms)")
stats <- keywords_rake(x = x, term = "lemma", group = "doc_id",
relevant = x$upos %in% c("NOUN", "ADJ"))
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 2), 14), col=colorRampPalette(brewer.pal(12,"Paired"))(14),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 2), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(14),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 2), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
stats <- keywords_rake(x = x, term = "lemma", group = "doc_id",
relevant = x$upos %in% c("NOUN", "ADJ", "VERB"))
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 2), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
View(stats)
stats <- keywords_rake(x = x, term = "lemma", group = "doc_id",
relevant = x$upos %in% c("NOUN", "ADJ"))
barchart(key ~ rake, data = head(subset(stats, rake > 2), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 1), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 7), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 7), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 6), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 6), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(6),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 6), 6), col=colorRampPalette(brewer.pal(12,"Paired"))(6),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 6), 6), col=colorRampPalette(brewer.pal(6,"Paired"))(6),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 6), 6), col=colorRampPalette(brewer.pal(6,"Paired"))(14),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 2), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 1), 10), col=colorRampPalette(brewer.pal(12,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 1), 7), col=colorRampPalette(brewer.pal(12,"Paired"))(7),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
x$phrase_tag <- as_phrasemachine(x$upos, type = "upos")
stats <- keywords_phrases(x = x$phrase_tag, term = tolower(x$token),
pattern = "(A|N)*N(P+D*(A|N)*N)*",
is_regex = TRUE, detailed = FALSE)
stats <- subset(stats, ngram > 1 & freq > 6)
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ freq, data = head(stats, 25), col = colorRampPalette(brewer.pal(12,"Set3"))(25),
main = "Keywords with Simple Noun Phrases", xlab = "Frequency of Terms")
## Simple noun phrases (a adjective+noun, pre/postposition, optional determiner and another adjective+noun)
x$phrase_tag <- as_phrasemachine(x$upos, type = "upos")
stats <- keywords_phrases(x = x$phrase_tag, term = tolower(x$token),
pattern = "(A|N)*N(P+D*(A|N)*N)*",
is_regex = TRUE, detailed = FALSE)
stats <- subset(stats, ngram > 1 & freq > 1)
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ freq, data = head(stats, 25), col = colorRampPalette(brewer.pal(12,"Set3"))(25),
main = "Keywords with Simple Noun Phrases", xlab = "Frequency of Terms")
stats <- subset(stats, ngram > 1 & freq > 2)
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ freq, data = head(stats, 25), col = colorRampPalette(brewer.pal(12,"Set3"))(25),
main = "Keywords with Simple Noun Phrases", xlab = "Frequency of Terms")
## Collocation (words following one another)
stats <- keywords_collocation(x = x,
term = "token", group = c("doc_id", "paragraph_id", "sentence_id"),
ngram_max = 4)
## Co-occurrences: How frequent do words occur in the same sentence, in this case only nouns or adjectives
stats <- cooccurrence(x = subset(x, upos %in% c("NOUN", "ADJ")),
term = "lemma", group = c("doc_id", "paragraph_id", "sentence_id"))
View(stats)
## Co-occurrences: How frequent do words follow one another
stats <- cooccurrence(x = x$lemma,
relevant = x$upos %in% c("NOUN", "ADJ"))
## Co-occurrences: How frequent do words follow one another even if we would skip 2 words in between
stats <- cooccurrence(x = x$lemma,
relevant = x$upos %in% c("NOUN", "ADJ"), skipgram = 2)
View(stats)
library(igraph)
library(ggraph)
library(ggplot2)
wordnetwork <- head(stats, 30)
wordnetwork <- graph_from_data_frame(wordnetwork)
ggraph(wordnetwork, layout = "fr") +
geom_edge_link(aes(width = cooc, edge_alpha = cooc), edge_colour = "light blue") +
geom_node_text(aes(label = name), col = "darkblue", size = 4) +
theme_graph(base_family = "Arial") +
theme(legend.position = "none") +
labs(title = "Cooccurrences of Terms", subtitle = "Nouns & Adjectives  within 3 Words Distance")
# Another approach for keyword detection is Textrank. Textrank is an algorithm implemented in the textrank R package.
# The algorithm allows to summarise text and as well allows to extract keywords.
# This is done by constructing a word network by looking if words are following one another.
# On top of that network the 'Google Pagerank' algorithm is applied to extract relevant words after which relevant words which are following
# one another are combined to get keywords. In the below example, we are interested in finding keywords using that algorithm of either nouns
# or adjectives following one another. You can see from the plot below that the keywords combines words together into multi-word expressions.
library(textrank)
stats <- textrank_keywords(x$lemma,
relevant = x$upos %in% c("NOUN", "ADJ"),
ngram_max = 10, sep = " ")
stats <- subset(stats$keywords, ngram > 1 & freq >= 3)
library(wordcloud)
pal = brewer.pal(11,"Dark2")
wordcloud(words = stats$keyword, freq = stats$freq, scale = c(2,.3),
random.order = T,
random.color = F,
colors = colorRampPalette(pal)(11))
stats <- subset(stats$keywords, ngram > 1 & freq >= 1)
library(wordcloud)
pal = brewer.pal(11,"Dark2")
wordcloud(words = stats$keyword, freq = stats$freq, scale = c(2,.3),
random.order = T,
random.color = F,
colors = colorRampPalette(pal)(11))
#################################################################################################################################################
2. ####################################################### subset for Spanish ###################################################################
stats <- textrank_keywords(x$lemma,
relevant = x$upos %in% c("NOUN", "ADJ"),
ngram_max = 10, sep = " ")
stats <- subset(stats$keywords, ngram >= 1 & freq >= 1)
View(stats)
stats <- subset(stats$keywords, ngram >= 1 & freq >= 1)
library(wordcloud)
pal = brewer.pal(11,"Dark2")
wordcloud(words = stats$keyword, freq = stats$freq, scale = c(2,.3),
random.order = T,
random.color = F,
colors = colorRampPalette(pal)(11))
stats <- subset(stats$keywords, ngram >= 1 & freq > 2)
library(wordcloud)
pal = brewer.pal(11,"Dark2")
wordcloud(words = stats$keyword, freq = stats$freq, scale = c(2,.3),
random.order = T,
random.color = F,
colors = colorRampPalette(pal)(11))
#################################################################################################################################################
2. ####################################################### subset for Spanish ###################################################################
df7<-subset(df4,(tolower(df4$DescriptionLanguage) =="spanish"))
library(tm)
df7$Description <-removeWords(as.character(tolower(df7$Description)), stopwords("spanish"))
df7$Description <- as.factor(df7$Description)
class(df7$Description)
library(udpipe)
ud_model <- udpipe_download_model(language = "spanish")
ud_model <- udpipe_load_model(ud_model$file_model)
x <- udpipe_annotate(ud_model, x = df7$Description, doc_id = df7$Id)
x <- as.data.frame(x)
library(lattice)
library(RColorBrewer)
display.brewer.all()
## NOUNS
stats <- subset(x, upos %in% c("NOUN"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10),col=colorRampPalette(brewer.pal(9, "Blues"))(10),
main = "Most Occurring Nouns in Description Fields (Spanish)", xlab = "Frequency (quantity of terms)")
## ADJECTIVES
stats <- subset(x, upos %in% c("ADJ"))
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10), col=colorRampPalette(brewer.pal(9,"Oranges"))(10),
main = "Most Occurring Adjectives in Description Fields (Spanish)", xlab = "Frequency (quantity of terms)")
View(x)
## NOUNS
stats <- subset(x, upos %in% c("NOUN"))
stats <- txt_freq(stats$lemma)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10),col=colorRampPalette(brewer.pal(9, "Blues"))(10),
main = "Most Occurring Nouns in Description Fields (Spanish)", xlab = "Frequency (quantity of terms)")
## ADJECTIVES
stats <- subset(x, upos %in% c("ADJ"))
stats <- txt_freq(stats$lemma)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10), col=colorRampPalette(brewer.pal(9,"Oranges"))(10),
main = "Most Occurring Adjectives in Description Fields (Spanish)", xlab = "Frequency (quantity of terms)")
## VERBS
stats <- subset(x, upos %in% c("VERB"))
stats <- txt_freq(stats$lemma)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 10), col=colorRampPalette(brewer.pal(9,"Greens"))(10),
main = "Most Occurring Verbs in Description Fields (Spanish)", xlab = "Frequency (quantity of terms)")
########################################################## Spanish Keywords Using RAKE #############################################################
stats <- keywords_rake(x = x, term = "lemma", group = "doc_id",
relevant = x$upos %in% c("NOUN", "ADJ"))
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 3), 14), col=colorRampPalette(brewer.pal(12,"Paired"))(14),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 3), 12), col=colorRampPalette(brewer.pal(12,"Paired"))(12),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
barchart(key ~ rake, data = head(subset(stats, freq > 3), 10), col=colorRampPalette(brewer.pal(10,"Paired"))(10),
main = "Keywords identified by Unsupervised Algorithm",
xlab = "Rapid Automatic Keyword Extraction Algorithm")
View(stats)
save.image("~/RData/OpportunityTextMining.RData")
rm(list=ls())
gc()
library(curl)
library(httr)
# aca es el pass de windows
set_config(use_proxy(url="ash-mwg-02", port=9090, username="rfpardo@iadb.org", password="Canada2021"))
############################### Prod ########################################
# aca es el pass de SF
library(RForcecom)
username <- "rfpardo@iadb.org"
password <- "Canada2021*O1CTIawMmrOaK98ubVW305Vf"
instanceURL <-  "https://login.salesforce.com/"
apiVersion <- "45.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
objectName <- "ActivityHistory"
getAllFields <- function(objectName) {
description <- rforcecom.getObjectDescription(session, objectName)
fields <- as.character(description$name)
rforcecom.retrieve(session, objectName, fields)
}
# grab the data
ActivityHistory <- getAllFields("ActivityHistory")
# grab the data
ActivityHistory <- getAllFields("ActivityHistory")
query<-("SELECT AccountId,
ActivityDate,
ActivitySubtype,
ActivityType,
AlternateDetailId,
CallDisposition,
CallDurationInSeconds,
CallObject,
CallType,
CreatedById,
CreatedDate,
Data_Quality_Description__c,
Data_Quality_Score__c,
Description,
DurationInMinutes,
EndDateTime,
Id,
IsAllDayEvent,
IsClosed,
IsDeleted,
IsHighPriority,
IsReminderSet,
IsTask,
LastModifiedById,
LastModifiedDate,
Location,
OwnerId,
PrimaryAccountId,
PrimaryWhoId,
Priority,
ReminderDateTime,
Sector_Global__c,
StartDateTime,
Status,
Subject,
SystemModstamp,
WhatId,
WhoId
FROM ActivityHistory")
ActivityHistory<-rforcecom.query(session, query, queryAll=FALSE)
objectName <- "Activity"
getAllFields <- function(objectName) {
description <- rforcecom.getObjectDescription(session, objectName)
fields <- as.character(description$name)
rforcecom.retrieve(session, objectName, fields)
}
# grab the data
Activity <- getAllFields("Activity")
objectName <- "Activity"
getAllFields <- function(objectName) {
description <- rforcecom.getObjectDescription(session, objectName)
fields <- as.character(description$name)
rforcecom.retrieve(session, objectName, fields)
}
# grab the data
Activity <- getAllFields("Activity")
objectName <- "Event"
getAllFields <- function(objectName) {
description <- rforcecom.getObjectDescription(session, objectName)
fields <- as.character(description$name)
rforcecom.retrieve(session, objectName, fields)
}
# grab the data
Event <- getAllFields("Event")
View(Event)
library(sqldf)
ActivityOpp <- sqldf('SELECT * FROM Event where WhatId like "006%"')
View(ActivityOpp)
ActivityCount<-sqldf('SELECT Id, count(WhatId) FROM ActivityOpp group by WhatId' )
View(ActivityCount)
ActivityCount<-sqldf('SELECT whatId, count(Id) FROM ActivityOpp group by WhatId' )
View(ActivityCount)
ActivityOpp <- sqldf('SELECT DISTINCT * FROM Event where WhatId like "006%"')
objectName <- "Task"
# grab the data
Task <- getAllFields("Task")
View(Task)
TaskCount<-sqldf('SELECT whatId, count(Id) FROM Task group by WhatId' )
View(TaskCount)
View(Task)
str(Task$TaskSubtype)
table(Task$TaskSubtype)
table(Task$TaskSubtype, NA="Always")
table(Task$TaskSubtype, useNA="Always")
table(Task$TaskSubtype, seNA = "always")
table(Task$TaskSubtype, useNA = "always")
MinistryOfHealth <- sqldf(SELECT TaskSubtype, count(Id) FROM Task where whatId = "0011I00000oqfeHQAQ"  group by TaskSubtype')
MinistryOfHealth <- sqldf('SELECT TaskSubtype, count(Id) FROM Task where whatId = "0011I00000oqfeHQAQ"  group by TaskSubtype')
View(MinistryOfHealth)
save.image("~/RData/Activity.RData")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(devtools)
# install dependencies from CRAN
deps <- c("knitr", "markdown", "yaml", "whisker", "stringr")
install.packages(deps)
install.packages(deps)
# install packages from github
ghrepos <- c('slidify', 'slidifyLibraries', 'rCharts')
install_github(ghrepos, 'ramnathv', ref = 'dev')
install.packages("devtools")
library(devtools)
# install dependencies from CRAN
deps <- c("knitr", "markdown", "yaml", "whisker", "stringr")
install.packages(deps)
install.packages(deps)
# install packages from github
ghrepos <- c('slidify', 'slidifyLibraries', 'rCharts')
install_github(ghrepos, 'ramnathv', ref = 'dev')
remotes::install_github(ghrepos, 'ramnathv', ref = 'dev')
install.packages("devtools")
library(devtools)
# install dependencies from CRAN
deps <- c("knitr", "markdown", "yaml", "whisker", "stringr")
install.packages(deps)
install.packages(deps)
install.packages(deps)
install.packages(deps)
# install packages from github
ghrepos <- c('slidify', 'slidifyLibraries', 'rCharts')
remotes::install_github(ghrepos, 'ramnathv', ref = 'dev')
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs, force = TRUE)
ghrepos <- c('rCharts')
remotes::install_github(ghrepos, 'ramnathv', ref = 'dev')
pkgs <- c('ramnathv/rCharts')
devtools::install_github(pkgs, force = TRUE)
install_github('rCharts', 'ramnathv')
devtools::install_github('rCharts', 'ramnathv')
devtools::install_github('rCharts', 'ramnathv', force = TRUE)
sessionInfo()
sessionInfo()
update.packages()
devtools::install_github('rCharts', 'ramnathv', force = TRUE)
require(devtools)
install_github('ramnathv/rCharts')
install.packages("devtools")
library(devtools)
install.packages("devtools")
# install dependencies from CRAN
deps <- c("knitr", "markdown", "yaml", "whisker", "stringr")
install.packages(deps)
install.packages(deps)
# install packages from github
require(devtools)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify','ramnathv/rCharts')
devtools::install_github(pkgs, force = TRUE)
library(slidify)
author("OpportunityTM")
getwd()
2 + 2
2 + 2
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
